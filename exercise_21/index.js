//Вычислить размер коллстэка в основных браузерах: Chrome, Firefox, Opera и Safari (если есть возможность).

// Размер коллстэка - это количество байт, которое он максимально может в себе удержать.
// На каждый вызов функции создается Execution Context - контекст вызова функции.
// Контекст выполнения – специальная внутренняя структура данных, которая содержит информацию о вызове функции.
// Она включает в себя конкретное место в коде, на котором находится интерпретатор, локальные переменные функции,
// значение this и прочую служебную информацию.

// Execution Context и каждая переменная внутри него имеют определенный размер, который они занимают в памяти.
// Сложив эти два размера мы и получим размер, которая отрезается от коллстека при каждом рекурсивном вызове функции.

//Числа в JavaScript представлены 64-битными значениями с плавающей запятой. В байте 8 бит, в результате каждое число занимает 64/8 = 8 байт.


// РАЗМЕРЫ КОЛЛСТЕКА

// CHROME - 1 004 720 байт
// CallStack = N * 12557 (при вызове функции без параметров, N - это размер Execution Context без парметров)
// CallStack = (N + 5 * SizeOfVar) * 8371 (при вызове функции c 5 числовыми параметрами, N - это размер Execution Context без параметров)
// CallStack = (N + 5 * 8) * 8371 (Числа в JavaScript представлены 64-битными значениями с плавающей запятой.
// В байте 8 бит, в результате каждое число занимает 64/8 = 8 байт.)
// (N + 5 * 8) * 8371 = N * 12557
// N = (40 * f2) / (f1 - f2) где f1 - количество вызова без параметров, f2 - количество вызова с 5 параметрами
// CallStack = ((40 * f2) / (f1 - f2)) * f1

// Firefox 6 935 897 / 9 521 839 / 22 689 613 / 11 759 332 байт - меняется при вызовах

// Yandex 1 007 872 байт

let i = 0;
// 12557 для хрома

// Рекурсивный вызов ф-ции без параметров, получим максимально возможное количество вызовов
const func = () => {
  i++;
  func();
};

try {
  func();
} catch (e) {
  console.log('Максимально возможное количество вызовов функции без параметров:', i);
}



let j = 0;
// 8371 для хрома

const func1 = () => {
  let a = 58;
  let b = 59;
  let c = 60;
  let d = 61;
  let e = 62;
  j++;

  func1();
};

try {
  func1();
} catch (e) {
  console.log('Максимально возможное количество вызовов функции с пятью числовыми параметрами:', j);
}

console.log('Размер коллстека: ' + ( ( (40 * (j - 1)) / (i - j - 2) ) * (i - 1) ).toFixed(0) + ' байт');
console.log('Размер Execution Context: ' +((40 * (j - 1)) / (i - j - 2)));
